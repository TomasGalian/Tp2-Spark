{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"mount_file_id":"1bprQ8DQZYtsmp4U6gxRBY_LaAvLgz9Dm","authorship_tag":"ABX9TyO9ZLFIqy3kobmeGOqjeKHz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["*¿Cuál* es el género con más películas cada década? ¿Y la keyword para cada década?"],"metadata":{"id":"z0wLDWl5-nnp"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cxKiBw9D-OLV","executionInfo":{"status":"ok","timestamp":1665994588401,"user_tz":180,"elapsed":60670,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"44598a8a-b122-4dcb-863c-776b91d3f49e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pyspark\n","  Downloading pyspark-3.3.0.tar.gz (281.3 MB)\n","\u001b[K     |████████████████████████████████| 281.3 MB 43 kB/s \n","\u001b[?25hCollecting py4j==0.10.9.5\n","  Downloading py4j-0.10.9.5-py2.py3-none-any.whl (199 kB)\n","\u001b[K     |████████████████████████████████| 199 kB 30.3 MB/s \n","\u001b[?25hBuilding wheels for collected packages: pyspark\n","  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyspark: filename=pyspark-3.3.0-py2.py3-none-any.whl size=281764026 sha256=b46fad994ba804937ed7163de2dc36748681311a3176f517a90ec4f0400e3ff8\n","  Stored in directory: /root/.cache/pip/wheels/7a/8e/1b/f73a52650d2e5f337708d9f6a1750d451a7349a867f928b885\n","Successfully built pyspark\n","Installing collected packages: py4j, pyspark\n","Successfully installed py4j-0.10.9.5 pyspark-3.3.0\n"]}],"source":["#Realizamos las importanciones\n","!pip install pyspark"]},{"cell_type":"code","source":["#Realizamos las importaciones para usar google drive y pyspark\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","from pyspark.sql import *\n","from pyspark.sql.functions import *\n","from pyspark import SparkContext\n","from pyspark.sql import SQLContext\n","import pandas as pd"],"metadata":{"id":"YHU6_MhL-phX","executionInfo":{"status":"ok","timestamp":1665994588918,"user_tz":180,"elapsed":532,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)"],"metadata":{"id":"DtAZO599-qXv","executionInfo":{"status":"ok","timestamp":1665994675096,"user_tz":180,"elapsed":86182,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["#Descargamos movies.parquet\n","descarga = drive.CreateFile({'id':'1YKh46_KdgSC-6UZ0mttbOqVI6tXgly-F'})\n","descarga.GetContentFile('movies.parquet')"],"metadata":{"id":"RmVXC0LQ-rLF","executionInfo":{"status":"ok","timestamp":1665994683788,"user_tz":180,"elapsed":8699,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["#Descargamos keywords.parquet\n","descarga = drive.CreateFile({'id':'1EVxUp83V7MOCoZDnVVPJq4bASw298But'})\n","descarga.GetContentFile('keywords.parquet')"],"metadata":{"id":"tg3CMkJ6FyEU","executionInfo":{"status":"ok","timestamp":1665994686259,"user_tz":180,"elapsed":2481,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["spark = SparkSession.builder.getOrCreate() #Obtenemos una sesion de spark\n","sc = spark.sparkContext #Obtenemos el contexto"],"metadata":{"id":"SS8AgRpK-yDO","executionInfo":{"status":"ok","timestamp":1665994696737,"user_tz":180,"elapsed":10483,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["#Creo los rdd con los que voy a trabajar\n","sqlContext = SQLContext(sc)\n","df = sqlContext.read.parquet('keywords.parquet',header=True,inferSchema=True)\n","keywordsRdd = df.rdd\n","df = sqlContext.read.parquet('movies.parquet',header=True,inferSchema=True)\n","moviesRdd = df.rdd "],"metadata":{"id":"LNVDhMoF-zSd","executionInfo":{"status":"ok","timestamp":1665994704077,"user_tz":180,"elapsed":7379,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2b15bc38-e6e1-4d2f-cfc4-a1904c16bfe3"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pyspark/sql/context.py:114: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n","  FutureWarning,\n"]}]},{"cell_type":"markdown","source":["# Caluclo los generos"],"metadata":{"id":"Xo4yNgCLe-GF"}},{"cell_type":"code","source":["#Me fijo cuantas movies tenemos en nuestro rdd\n","moviesRdd.count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5gbKnqcHO-Oi","executionInfo":{"status":"ok","timestamp":1665994709876,"user_tz":180,"elapsed":5807,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"ec1f33ce-b5db-4b26-e3fe-986a209d703a"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["45466"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["#Filtro aquellas peliculas que no tengan la fecha de estreno o que no tengan el formato correcto\n","moviesRdd = moviesRdd.filter(lambda x: x.release_date!=None).filter(lambda x: ('-') in str(x.release_date))\n","moviesRdd.count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"okJARqG5Oz3g","executionInfo":{"status":"ok","timestamp":1665994711791,"user_tz":180,"elapsed":1946,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"cd079edc-914f-4fcf-dd4e-e6462ad57bf0"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["45376"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["#Filtro aquellas peliculas que no tengan genero y mapeo los registros de forma que me quede como clave valor (decada,listaGeneros) por cada pelicula \n","moviesDecadaRdd = moviesRdd.filter(lambda x: x.genres!=None).map(lambda x: (int(x.release_date.split('-')[0])-(int(x.release_date.split('-')[0])%10),x.genres.split(',')))"],"metadata":{"id":"oQmd7PRUPai2","executionInfo":{"status":"ok","timestamp":1665994711792,"user_tz":180,"elapsed":8,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["#Tomamos 5 para ver como estaria quedando. Cada fila representa una pelicula.\n","moviesDecadaRdd.take(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uE2yEU2HIkWL","executionInfo":{"status":"ok","timestamp":1665994712360,"user_tz":180,"elapsed":574,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"95bbba21-4c36-4d3d-a00b-bdd6daac8a4b"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(1990, ['Animation', 'Comedy', 'Family']),\n"," (1990, ['Adventure', 'Fantasy', 'Family']),\n"," (1990, ['Romance', 'Comedy']),\n"," (1990, ['Comedy', 'Drama', 'Romance']),\n"," (1990, ['Comedy'])]"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["#Lo primero que hago es realizar una especie de \"explode\" con un flatMap de forma tal que me quede (decada + genero, 1) por cada pelicula y en caso de tener mas de un genero se repetira esa pelicula con los otros generos\n","#Una vez que tengo esto hago un reduceByKey sumando los valores de forma tal que me quede cuantas peliculas se hicieron para cada genero para cada decada.\n","#Teninedo ya ese calculo realizado mapeo nuevamentfe mis registros de forma tal que ahora quede (decada,genero+cantPeliculas) donde cantPeliculas son la cantidad de peliculas para esa decada para ese genero\n","#Con eso ya resuelto solo queda realizar un reduceByKey que en este caso sera por decadas para quedarme con el genero que mas cantidad tenga realizando una comparacion sencilla entre cantPeliculas\n","#El formato en el que queda resuelto es (decada, Genero + cantidadDePeliculas)\n","moviesDecadaRdd.flatMap(lambda x: [((str(x[0])+' '+w),1) for w in x[1]]).reduceByKey(lambda a,b: a+b).map(lambda x: (x[0].split()[0],x[0].split()[1] + ' '+ str(x[1])))\\\n",".reduceByKey(lambda a,b: a if (int(a.split()[1]) > int(b.split()[1])) else b).collect()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"01EVvLX3imHg","executionInfo":{"status":"ok","timestamp":1665994716285,"user_tz":180,"elapsed":3930,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"df35c758-5364-44e8-e382-a80571d19927"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('1990', 'Drama 2613'),\n"," ('1970', 'Drama 1508'),\n"," ('1980', 'Drama 1553'),\n"," ('1940', 'Drama 781'),\n"," ('2010', 'Drama 5183'),\n"," ('1920', 'Drama 257'),\n"," ('1890', 'Documentary 28'),\n"," ('2020', 'Fantasy 1'),\n"," ('1880', 'Documentary 4'),\n"," ('1930', 'Drama 707'),\n"," ('1960', 'Drama 1212'),\n"," ('1950', 'Drama 1065'),\n"," ('2000', 'Drama 5282'),\n"," ('1910', 'Drama 81'),\n"," ('1900', 'Fantasy 30'),\n"," ('1870', 'Documentary 2')]"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["# Calculamos las keywords ahora"],"metadata":{"id":"xAlJKJm_fMB7"}},{"cell_type":"code","source":["#Filtro aquellas keywors que no tengan keywords (valga la redundancia) y luego mapeo de forma tal que me quede (movieId,listaKeywords)\n","keywordsRdd = keywordsRdd.filter(lambda x: x.keywords != None).map(lambda x: (x.id,x.keywords.split(',')))\n","keywordsRdd.take(5) #Vemos como quedaria este mapeo tomando 5 registros"],"metadata":{"id":"LpuGu3B8FLuI","executionInfo":{"status":"ok","timestamp":1665994716287,"user_tz":180,"elapsed":28,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"cd6c003e-41a0-4056-9c10-fcd882c93300"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(862,\n","  ['jealousy',\n","   'toy',\n","   'boy',\n","   'friendship',\n","   'friends',\n","   'rivalry',\n","   'boy next door',\n","   'new toy',\n","   'toy comes to life']),\n"," (8844,\n","  ['board game',\n","   'disappearance',\n","   \"based on children's book\",\n","   'new home',\n","   'recluse',\n","   'giant insect']),\n"," (15602, ['fishing', 'best friend', 'duringcreditsstinger', 'old men']),\n"," (31357,\n","  ['based on novel',\n","   'interracial relationship',\n","   'single mother',\n","   'divorce',\n","   'chick flick']),\n"," (11862,\n","  ['baby',\n","   'midlife crisis',\n","   'confidence',\n","   'aging',\n","   'daughter',\n","   'mother daughter relationship',\n","   'pregnancy',\n","   'contraception',\n","   'gynecologist'])]"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["#Creo un nuevo rdd mapeando moviesRdd de forma tal que quede (idPelicula,decada) para realizar un join con keywordsRdd\n","moviesKeywordsRdd = moviesRdd.map(lambda x: (int(x.id),int(x.release_date.split('-')[0])-(int(x.release_date.split('-')[0])%10)))\n","moviesKeywordsRdd.take(5)#Vemos como quedaria este mapeo tomando 5 registros"],"metadata":{"id":"W_w9-e6RGolP","executionInfo":{"status":"ok","timestamp":1665994716288,"user_tz":180,"elapsed":20,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"efcff438-a7bd-49ad-a22d-5ae3a6434f5a"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(862, 1990), (8844, 1990), (15602, 1990), (31357, 1990), (11862, 1990)]"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["#Al realizar este join logro juntar las keywords con las decadas utilizando la clave de movieId de ambos registros. De esta forma me quedan los registros de la forma (movieId,(decada,keywords))\n","keywordsDecadaRdd = moviesKeywordsRdd.join(keywordsRdd)\n","keywordsDecadaRdd.take(5)#Vemos como quedaria este mapeo tomando 5 registros"],"metadata":{"id":"koljY0c0JF7t","executionInfo":{"status":"ok","timestamp":1665994721469,"user_tz":180,"elapsed":5194,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"dd5467ac-bc1f-47c3-e1a3-202854096541"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(8844,\n","  (1990,\n","   ['board game',\n","    'disappearance',\n","    \"based on children's book\",\n","    'new home',\n","    'recluse',\n","    'giant insect'])),\n"," (11862,\n","  (1990,\n","   ['baby',\n","    'midlife crisis',\n","    'confidence',\n","    'aging',\n","    'daughter',\n","    'mother daughter relationship',\n","    'pregnancy',\n","    'contraception',\n","    'gynecologist'])),\n"," (9087,\n","  (1990,\n","   ['white house',\n","    'usa president',\n","    'new love',\n","    'widower',\n","    'wildlife conservation'])),\n"," (4584,\n","  (1990,\n","   ['bowling',\n","    'based on novel',\n","    'servant',\n","    'country life',\n","    'jane austen',\n","    'inheritance',\n","    'military officer',\n","    'period drama',\n","    'rainstorm',\n","    'horse and carriage',\n","    'decorum'])),\n"," (9273, (1990, ['africa', 'indigenous', 'human animal relationship', 'bat']))]"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["#Me quedo solo con (Decada,Keyword)\n","keywordsDecadaRdd = keywordsDecadaRdd.map(lambda x:x[1])\n","keywordsDecadaRdd.take(5)"],"metadata":{"id":"AufhK4ikMoGL","executionInfo":{"status":"ok","timestamp":1665994721471,"user_tz":180,"elapsed":15,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e2b5a9f4-6f88-4657-c86c-a79cdf95d08e"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(1990,\n","  ['board game',\n","   'disappearance',\n","   \"based on children's book\",\n","   'new home',\n","   'recluse',\n","   'giant insect']),\n"," (1990,\n","  ['baby',\n","   'midlife crisis',\n","   'confidence',\n","   'aging',\n","   'daughter',\n","   'mother daughter relationship',\n","   'pregnancy',\n","   'contraception',\n","   'gynecologist']),\n"," (1990,\n","  ['white house',\n","   'usa president',\n","   'new love',\n","   'widower',\n","   'wildlife conservation']),\n"," (1990,\n","  ['bowling',\n","   'based on novel',\n","   'servant',\n","   'country life',\n","   'jane austen',\n","   'inheritance',\n","   'military officer',\n","   'period drama',\n","   'rainstorm',\n","   'horse and carriage',\n","   'decorum']),\n"," (1990, ['africa', 'indigenous', 'human animal relationship', 'bat'])]"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["#Realizo lo mismo que antes, hago una especie de explode de forma tal que me quede (decada + keyword,1). Hago un reduceByKey contando las keywords en cada decada luego las separo y hago otro reduceByKey para quedarme con la que mas se usa por decada\n","keywordsDecadaRdd.flatMap(lambda x: [((str(x[0])+','+w),1) for w in x[1]]).reduceByKey(lambda a,b: a+b).map(lambda x: (x[0].split(',')[0],x[0].split(',')[1] + ',' + str(x[1])))\\\n",".reduceByKey(lambda a,b: a if (int(a.split(',')[1]) > int(b.split(',')[1])) else b).collect()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U8nno8l3JwA0","executionInfo":{"status":"ok","timestamp":1665994722675,"user_tz":180,"elapsed":1213,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}},"outputId":"f6411475-da21-4bdf-abef-2149249888bb"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('1980', 'independent film,203'),\n"," ('1970', 'murder,167'),\n"," ('1920', 'silent film,144'),\n"," ('1910', 'silent film,40'),\n"," ('1870', 'silent film,2'),\n"," ('1990', 'woman director,401'),\n"," ('1950', 'film noir,113'),\n"," ('2010', 'woman director,1429'),\n"," ('1900', 'silent film,51'),\n"," ('2020', 'alien planet,1'),\n"," ('1960', 'independent film,77'),\n"," ('1930', 'musical,89'),\n"," ('1940', 'film noir,154'),\n"," ('2000', 'woman director,1003'),\n"," ('1890', 'silent film,48'),\n"," ('1880', 'short,3')]"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":[],"metadata":{"id":"XH2BwkuVApe6","executionInfo":{"status":"ok","timestamp":1665994722676,"user_tz":180,"elapsed":15,"user":{"displayName":"Tomas Ezequiel Galian","userId":"10920691488309285943"}}},"execution_count":17,"outputs":[]}]}